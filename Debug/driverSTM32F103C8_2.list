
driverSTM32F103C8_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d78  08000d78  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d78  08000d78  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000d78  08000d78  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d78  08000d78  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000418  08001198  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08001198  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b73  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005c1  00000000  00000000  00021fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00022578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  000226d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c37  00000000  00000000  000227e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d1b  00000000  00000000  00023417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093be  00000000  00000000  00025132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c0  00000000  00000000  0002e544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000418 	.word	0x20000418
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d60 	.word	0x08000d60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000041c 	.word	0x2000041c
 800016c:	08000d60 	.word	0x08000d60

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_frsub>:
 8000180:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__addsf3>
 8000186:	bf00      	nop

08000188 <__aeabi_fsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800018c <__addsf3>:
 800018c:	0042      	lsls	r2, r0, #1
 800018e:	bf1f      	itttt	ne
 8000190:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000194:	ea92 0f03 	teqne	r2, r3
 8000198:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800019c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a0:	d06a      	beq.n	8000278 <__addsf3+0xec>
 80001a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001aa:	bfc1      	itttt	gt
 80001ac:	18d2      	addgt	r2, r2, r3
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	4048      	eorgt	r0, r1
 80001b2:	4041      	eorgt	r1, r0
 80001b4:	bfb8      	it	lt
 80001b6:	425b      	neglt	r3, r3
 80001b8:	2b19      	cmp	r3, #25
 80001ba:	bf88      	it	hi
 80001bc:	4770      	bxhi	lr
 80001be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4240      	negne	r0, r0
 80001ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4249      	negne	r1, r1
 80001de:	ea92 0f03 	teq	r2, r3
 80001e2:	d03f      	beq.n	8000264 <__addsf3+0xd8>
 80001e4:	f1a2 0201 	sub.w	r2, r2, #1
 80001e8:	fa41 fc03 	asr.w	ip, r1, r3
 80001ec:	eb10 000c 	adds.w	r0, r0, ip
 80001f0:	f1c3 0320 	rsb	r3, r3, #32
 80001f4:	fa01 f103 	lsl.w	r1, r1, r3
 80001f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001fc:	d502      	bpl.n	8000204 <__addsf3+0x78>
 80001fe:	4249      	negs	r1, r1
 8000200:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000208:	d313      	bcc.n	8000232 <__addsf3+0xa6>
 800020a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020e:	d306      	bcc.n	800021e <__addsf3+0x92>
 8000210:	0840      	lsrs	r0, r0, #1
 8000212:	ea4f 0131 	mov.w	r1, r1, rrx
 8000216:	f102 0201 	add.w	r2, r2, #1
 800021a:	2afe      	cmp	r2, #254	; 0xfe
 800021c:	d251      	bcs.n	80002c2 <__addsf3+0x136>
 800021e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	ea40 0003 	orr.w	r0, r0, r3
 8000230:	4770      	bx	lr
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	eb40 0000 	adc.w	r0, r0, r0
 8000238:	3a01      	subs	r2, #1
 800023a:	bf28      	it	cs
 800023c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000240:	d2ed      	bcs.n	800021e <__addsf3+0x92>
 8000242:	fab0 fc80 	clz	ip, r0
 8000246:	f1ac 0c08 	sub.w	ip, ip, #8
 800024a:	ebb2 020c 	subs.w	r2, r2, ip
 800024e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000252:	bfaa      	itet	ge
 8000254:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000258:	4252      	neglt	r2, r2
 800025a:	4318      	orrge	r0, r3
 800025c:	bfbc      	itt	lt
 800025e:	40d0      	lsrlt	r0, r2
 8000260:	4318      	orrlt	r0, r3
 8000262:	4770      	bx	lr
 8000264:	f092 0f00 	teq	r2, #0
 8000268:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800026c:	bf06      	itte	eq
 800026e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000272:	3201      	addeq	r2, #1
 8000274:	3b01      	subne	r3, #1
 8000276:	e7b5      	b.n	80001e4 <__addsf3+0x58>
 8000278:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800027c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000280:	bf18      	it	ne
 8000282:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000286:	d021      	beq.n	80002cc <__addsf3+0x140>
 8000288:	ea92 0f03 	teq	r2, r3
 800028c:	d004      	beq.n	8000298 <__addsf3+0x10c>
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	bf08      	it	eq
 8000294:	4608      	moveq	r0, r1
 8000296:	4770      	bx	lr
 8000298:	ea90 0f01 	teq	r0, r1
 800029c:	bf1c      	itt	ne
 800029e:	2000      	movne	r0, #0
 80002a0:	4770      	bxne	lr
 80002a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a6:	d104      	bne.n	80002b2 <__addsf3+0x126>
 80002a8:	0040      	lsls	r0, r0, #1
 80002aa:	bf28      	it	cs
 80002ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	4770      	bx	lr
 80002b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b6:	bf3c      	itt	cc
 80002b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bxcc	lr
 80002be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ca:	4770      	bx	lr
 80002cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d0:	bf16      	itet	ne
 80002d2:	4608      	movne	r0, r1
 80002d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d8:	4601      	movne	r1, r0
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	bf06      	itte	eq
 80002de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002e2:	ea90 0f01 	teqeq	r0, r1
 80002e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ea:	4770      	bx	lr

080002ec <__aeabi_ui2f>:
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	e004      	b.n	80002fc <__aeabi_i2f+0x8>
 80002f2:	bf00      	nop

080002f4 <__aeabi_i2f>:
 80002f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f8:	bf48      	it	mi
 80002fa:	4240      	negmi	r0, r0
 80002fc:	ea5f 0c00 	movs.w	ip, r0
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000308:	4601      	mov	r1, r0
 800030a:	f04f 0000 	mov.w	r0, #0
 800030e:	e01c      	b.n	800034a <__aeabi_l2f+0x2a>

08000310 <__aeabi_ul2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	e00a      	b.n	8000334 <__aeabi_l2f+0x14>
 800031e:	bf00      	nop

08000320 <__aeabi_l2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800032c:	d502      	bpl.n	8000334 <__aeabi_l2f+0x14>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	ea5f 0c01 	movs.w	ip, r1
 8000338:	bf02      	ittt	eq
 800033a:	4684      	moveq	ip, r0
 800033c:	4601      	moveq	r1, r0
 800033e:	2000      	moveq	r0, #0
 8000340:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000344:	bf08      	it	eq
 8000346:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800034a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034e:	fabc f28c 	clz	r2, ip
 8000352:	3a08      	subs	r2, #8
 8000354:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000358:	db10      	blt.n	800037c <__aeabi_l2f+0x5c>
 800035a:	fa01 fc02 	lsl.w	ip, r1, r2
 800035e:	4463      	add	r3, ip
 8000360:	fa00 fc02 	lsl.w	ip, r0, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	fa20 f202 	lsr.w	r2, r0, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f102 0220 	add.w	r2, r2, #32
 8000380:	fa01 fc02 	lsl.w	ip, r1, r2
 8000384:	f1c2 0220 	rsb	r2, r2, #32
 8000388:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800038c:	fa21 f202 	lsr.w	r2, r1, r2
 8000390:	eb43 0002 	adc.w	r0, r3, r2
 8000394:	bf08      	it	eq
 8000396:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800039a:	4770      	bx	lr

0800039c <__aeabi_f2uiz>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	d20e      	bcs.n	80003be <__aeabi_f2uiz+0x22>
 80003a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80003a4:	d30b      	bcc.n	80003be <__aeabi_f2uiz+0x22>
 80003a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80003aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80003ae:	d409      	bmi.n	80003c4 <__aeabi_f2uiz+0x28>
 80003b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80003b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003b8:	fa23 f002 	lsr.w	r0, r3, r2
 80003bc:	4770      	bx	lr
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	4770      	bx	lr
 80003c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80003c8:	d101      	bne.n	80003ce <__aeabi_f2uiz+0x32>
 80003ca:	0242      	lsls	r2, r0, #9
 80003cc:	d102      	bne.n	80003d4 <__aeabi_f2uiz+0x38>
 80003ce:	f04f 30ff 	mov.w	r0, #4294967295
 80003d2:	4770      	bx	lr
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop

080003dc <USART1_Init>:
char test[1024] = "Hello";

USART_Handle_t usart1_handle;

void USART1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	usart1_handle.pUSARTx = USART1;
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <USART1_Init+0x3c>)
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <USART1_Init+0x40>)
 80003e4:	60da      	str	r2, [r3, #12]
	usart1_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <USART1_Init+0x3c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
	usart1_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <USART1_Init+0x3c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	72da      	strb	r2, [r3, #11]
	usart1_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <USART1_Init+0x3c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	usart1_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <USART1_Init+0x3c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	721a      	strb	r2, [r3, #8]
	usart1_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <USART1_Init+0x3c>)
 8000402:	2200      	movs	r2, #0
 8000404:	725a      	strb	r2, [r3, #9]
	usart1_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <USART1_Init+0x3c>)
 8000408:	2200      	movs	r2, #0
 800040a:	729a      	strb	r2, [r3, #10]
	USART_Init(&usart1_handle);
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <USART1_Init+0x3c>)
 800040e:	f000 fb57 	bl	8000ac0 <USART_Init>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000434 	.word	0x20000434
 800041c:	40013800 	.word	0x40013800

08000420 <USART1_GPIOInit>:
/*
 * PA9 - TX
 * PA10 - RX
 */
void USART1_GPIOInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
	GPIO_Handle_t USARTPins;

	USARTPins.pGPIOx = GPIOA;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <USART1_GPIOInit+0x34>)
 8000428:	603b      	str	r3, [r7, #0]
	USARTPins.GPIO_PinConfig.PinNumber = PIN9;
 800042a:	2309      	movs	r3, #9
 800042c:	60bb      	str	r3, [r7, #8]
	USARTPins.GPIO_PinConfig.PinConfig = CONFIG_OUTPUT_ALTERNAL_FUNCTION_PUSH_PULL;
 800042e:	2308      	movs	r3, #8
 8000430:	737b      	strb	r3, [r7, #13]
	USARTPins.GPIO_PinConfig.PinMode = MODE_OUTPUT_SPEED_50;
 8000432:	2303      	movs	r3, #3
 8000434:	733b      	strb	r3, [r7, #12]
	//TX
	GPIO_Init(&USARTPins);
 8000436:	463b      	mov	r3, r7
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f8f5 	bl	8000628 <GPIO_Init>

	//RX
	USARTPins.GPIO_PinConfig.PinNumber = PIN10;
 800043e:	230a      	movs	r3, #10
 8000440:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000442:	463b      	mov	r3, r7
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f8ef 	bl	8000628 <GPIO_Init>
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010800 	.word	0x40010800

08000458 <main>:
int main()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	USART1_GPIOInit();
 800045c:	f7ff ffe0 	bl	8000420 <USART1_GPIOInit>
	USART1_Init();
 8000460:	f7ff ffbc 	bl	80003dc <USART1_Init>
	USART_PeripheralControl(USART1, ENABLE);
 8000464:	2101      	movs	r1, #1
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <main+0x28>)
 8000468:	f000 fbd8 	bl	8000c1c <USART_PeripheralControl>

	while(1)
	{
		USART_SendData(&usart1_handle, (uint8_t*)test, strlen(test));
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <main+0x2c>)
 800046e:	f7ff fe7f 	bl	8000170 <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	4903      	ldr	r1, [pc, #12]	; (8000484 <main+0x2c>)
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <main+0x30>)
 800047a:	f000 fc00 	bl	8000c7e <USART_SendData>
		while(1);
 800047e:	e7fe      	b.n	800047e <main+0x26>
 8000480:	40013800 	.word	0x40013800
 8000484:	20000000 	.word	0x20000000
 8000488:	20000434 	.word	0x20000434

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000490:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	; (80004cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <LoopForever+0xe>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	; (80004d8 <LoopForever+0x16>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ba:	f000 fc2d 	bl	8000d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff ffcb 	bl	8000458 <main>

080004c2 <LoopForever>:

LoopForever:
    b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>
  ldr   r0, =_estack
 80004c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80004d0:	08000d80 	.word	0x08000d80
  ldr r2, =_sbss
 80004d4:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80004d8:	20000458 	.word	0x20000458

080004dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC1_2_IRQHandler>
	...

080004e0 <PeriClockControl>:
/*
	Description: Hàm này Enable hoặc Disable các Port

*/
void PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d136      	bne.n	8000560 <PeriClockControl+0x80>
	{
		if(pGPIOx == GPIOA)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a38      	ldr	r2, [pc, #224]	; (80005d8 <PeriClockControl+0xf8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <PeriClockControl+0xfc>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a37      	ldr	r2, [pc, #220]	; (80005dc <PeriClockControl+0xfc>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
		}else if(pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}
	}
}
 8000506:	e061      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOB)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <PeriClockControl+0x100>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <PeriClockControl+0xfc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a31      	ldr	r2, [pc, #196]	; (80005dc <PeriClockControl+0xfc>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6193      	str	r3, [r2, #24]
}
 800051c:	e056      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOC)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <PeriClockControl+0x104>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <PeriClockControl+0xfc>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <PeriClockControl+0xfc>)
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	6193      	str	r3, [r2, #24]
}
 8000532:	e04b      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOD)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a2c      	ldr	r2, [pc, #176]	; (80005e8 <PeriClockControl+0x108>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <PeriClockControl+0xfc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <PeriClockControl+0xfc>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
}
 8000548:	e040      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOE)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <PeriClockControl+0x10c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d13c      	bne.n	80005cc <PeriClockControl+0xec>
			GPIOE_PCLK_EN();
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <PeriClockControl+0xfc>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a21      	ldr	r2, [pc, #132]	; (80005dc <PeriClockControl+0xfc>)
 8000558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055c:	6193      	str	r3, [r2, #24]
}
 800055e:	e035      	b.n	80005cc <PeriClockControl+0xec>
		if(pGPIOx == GPIOA)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <PeriClockControl+0xf8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <PeriClockControl+0x96>
			GPIOA_PCLK_DI();
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <PeriClockControl+0xfc>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <PeriClockControl+0xfc>)
 800056e:	f023 0304 	bic.w	r3, r3, #4
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	e02a      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOB)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <PeriClockControl+0x100>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <PeriClockControl+0xac>
			GPIOB_PCLK_DI();
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <PeriClockControl+0xfc>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <PeriClockControl+0xfc>)
 8000584:	f023 0308 	bic.w	r3, r3, #8
 8000588:	60d3      	str	r3, [r2, #12]
}
 800058a:	e01f      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOC)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <PeriClockControl+0x104>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <PeriClockControl+0xc2>
			GPIOC_PCLK_DI();
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <PeriClockControl+0xfc>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <PeriClockControl+0xfc>)
 800059a:	f023 0310 	bic.w	r3, r3, #16
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	e014      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOD)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <PeriClockControl+0x108>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <PeriClockControl+0xd8>
			GPIOD_PCLK_DI();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <PeriClockControl+0xfc>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <PeriClockControl+0xfc>)
 80005b0:	f023 0320 	bic.w	r3, r3, #32
 80005b4:	60d3      	str	r3, [r2, #12]
}
 80005b6:	e009      	b.n	80005cc <PeriClockControl+0xec>
		}else if(pGPIOx == GPIOE)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <PeriClockControl+0x10c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d105      	bne.n	80005cc <PeriClockControl+0xec>
			GPIOE_PCLK_DI();
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <PeriClockControl+0xfc>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <PeriClockControl+0xfc>)
 80005c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40010800 	.word	0x40010800
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40011000 	.word	0x40011000
 80005e8:	40011400 	.word	0x40011400
 80005ec:	40011800 	.word	0x40011800

080005f0 <PeriClockAFIOControl>:

void PeriClockAFIOControl(AFIO_RegDef_t *pAFIO, uint8_t EnorDi)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d109      	bne.n	8000616 <PeriClockAFIOControl+0x26>
	{
		if(pAFIO == AFIO)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <PeriClockAFIOControl+0x30>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d105      	bne.n	8000616 <PeriClockAFIOControl+0x26>
		{
			AFIO_PCLK_EN();
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <PeriClockAFIOControl+0x34>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <PeriClockAFIOControl+0x34>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
		}
	}
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40010000 	.word	0x40010000
 8000624:	40021000 	.word	0x40021000

08000628 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);//Enable Port
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff52 	bl	80004e0 <PeriClockControl>

	uint32_t modeConfig = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
	uint8_t pinPosition = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	76fb      	strb	r3, [r7, #27]
	uint32_t temp = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

	uint32_t finalConfig = pGPIOHandle->GPIO_PinConfig.PinConfig;//Lưu config vào biến
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7b5b      	ldrb	r3, [r3, #13]
 800064c:	613b      	str	r3, [r7, #16]
		Description: Kiểm tra xem mode phải là mode input hay không và thuộc pullup hay pulldown
					- Nếu pullup thì set bit tương ứng với chân lên bằng 1
					- Nếu là pulldown thì reset bit tương ứng với chân bằng 0.
	*/

	if(pGPIOHandle->GPIO_PinConfig.PinMode == MODE_INPUT && (pGPIOHandle->GPIO_PinConfig.PinConfig == CONFIG_INPUT_PULL_UP || pGPIOHandle->GPIO_PinConfig.PinConfig == CONFIG_INPUT_PULL_DOWN))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7b1b      	ldrb	r3, [r3, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d12b      	bne.n	80006ae <GPIO_Init+0x86>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7b5b      	ldrb	r3, [r3, #13]
 800065a:	2b08      	cmp	r3, #8
 800065c:	d003      	beq.n	8000666 <GPIO_Init+0x3e>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7b5b      	ldrb	r3, [r3, #13]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d123      	bne.n	80006ae <GPIO_Init+0x86>
	{
		if(pGPIOHandle->GPIO_PinConfig.PinConfig == CONFIG_INPUT_PULL_UP)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b5b      	ldrb	r3, [r3, #13]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d10d      	bne.n	800068a <GPIO_Init+0x62>
		{
			pGPIOHandle->pGPIOx->ODR |= (1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68da      	ldr	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	4619      	mov	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	e011      	b.n	80006ae <GPIO_Init+0x86>
		}else if(pGPIOHandle->GPIO_PinConfig.PinConfig == CONFIG_INPUT_PULL_DOWN)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	7b5b      	ldrb	r3, [r3, #13]
 800068e:	2b08      	cmp	r3, #8
 8000690:	d10d      	bne.n	80006ae <GPIO_Init+0x86>
		{
			pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	400a      	ands	r2, r1
 80006ac:	60da      	str	r2, [r3, #12]
	 	 	 	 - Nếu ngắt cạnh xuống thì set bit tương ứng với chân yêu cầu ngắt vào thanh ghi EXTI_RTSR
	 	 	 	 - Nếu ngắt cạnh lên và cạnh xuống thì set bit tương ứng với chân yêu cầu ngắt vào cả 2 thanh ghi
	 	 	 	 - Cấu hình ngắt với thanh ghi AFIO_EXTICR[x]

	*/
	if(pGPIOHandle->GPIO_PinConfig.PinMode == MODE_INPUT && (pGPIOHandle->GPIO_PinConfig.Interrupt == IT_FALLING_EDGE || pGPIOHandle->GPIO_PinConfig.Interrupt == IT_RISING_EDGE
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7b1b      	ldrb	r3, [r3, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80b7 	bne.w	8000826 <GPIO_Init+0x1fe>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7b9b      	ldrb	r3, [r3, #14]
 80006bc:	2b05      	cmp	r3, #5
 80006be:	d008      	beq.n	80006d2 <GPIO_Init+0xaa>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7b9b      	ldrb	r3, [r3, #14]
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d004      	beq.n	80006d2 <GPIO_Init+0xaa>
																|| pGPIOHandle->GPIO_PinConfig.Interrupt == IT_FALLING_AND_RISING_EDGE))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b9b      	ldrb	r3, [r3, #14]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	f040 80aa 	bne.w	8000826 <GPIO_Init+0x1fe>
	{
		PeriClockAFIOControl(pGPIOHandle->pAFIO,ENABLE);//Enable AFIO
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff89 	bl	80005f0 <PeriClockAFIOControl>

		if(pGPIOHandle->GPIO_PinConfig.Interrupt == IT_FALLING_EDGE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7b9b      	ldrb	r3, [r3, #14]
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	d117      	bne.n	8000716 <GPIO_Init+0xee>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 80006e6:	4b77      	ldr	r3, [pc, #476]	; (80008c4 <GPIO_Init+0x29c>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a73      	ldr	r2, [pc, #460]	; (80008c4 <GPIO_Init+0x29c>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 80006fc:	4b71      	ldr	r3, [pc, #452]	; (80008c4 <GPIO_Init+0x29c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	6892      	ldr	r2, [r2, #8]
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	43d2      	mvns	r2, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a6d      	ldr	r2, [pc, #436]	; (80008c4 <GPIO_Init+0x29c>)
 8000710:	400b      	ands	r3, r1
 8000712:	6093      	str	r3, [r2, #8]
 8000714:	e035      	b.n	8000782 <GPIO_Init+0x15a>

		}else if(pGPIOHandle->GPIO_PinConfig.Interrupt == IT_RISING_EDGE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7b9b      	ldrb	r3, [r3, #14]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d117      	bne.n	800074e <GPIO_Init+0x126>
		{
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <GPIO_Init+0x29c>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	6892      	ldr	r2, [r2, #8]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	43d2      	mvns	r2, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a64      	ldr	r2, [pc, #400]	; (80008c4 <GPIO_Init+0x29c>)
 8000732:	400b      	ands	r3, r1
 8000734:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <GPIO_Init+0x29c>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	6892      	ldr	r2, [r2, #8]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a5f      	ldr	r2, [pc, #380]	; (80008c4 <GPIO_Init+0x29c>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6093      	str	r3, [r2, #8]
 800074c:	e019      	b.n	8000782 <GPIO_Init+0x15a>
		}else if(pGPIOHandle->GPIO_PinConfig.Interrupt == IT_FALLING_AND_RISING_EDGE)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7b9b      	ldrb	r3, [r3, #14]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d115      	bne.n	8000782 <GPIO_Init+0x15a>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000756:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <GPIO_Init+0x29c>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	6892      	ldr	r2, [r2, #8]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a57      	ldr	r2, [pc, #348]	; (80008c4 <GPIO_Init+0x29c>)
 8000768:	430b      	orrs	r3, r1
 800076a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 800076c:	4b55      	ldr	r3, [pc, #340]	; (80008c4 <GPIO_Init+0x29c>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	6892      	ldr	r2, [r2, #8]
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a51      	ldr	r2, [pc, #324]	; (80008c4 <GPIO_Init+0x29c>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6093      	str	r3, [r2, #8]
		}

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.PinNumber / 4;//tìm số thanh ghi EXTICR tương ứng với số chân
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	089b      	lsrs	r3, r3, #2
 8000788:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.PinNumber % 4;//tìm số Pin trong thanh ghi EXTICR
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f003 0303 	and.w	r3, r3, #3
 8000794:	73bb      	strb	r3, [r7, #14]
		uint8_t code = GPIO_BASSADDR_TO_CODE(pGPIOHandle->pGPIOx);//giá trị tương ứng với Port
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a4b      	ldr	r2, [pc, #300]	; (80008c8 <GPIO_Init+0x2a0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d02b      	beq.n	80007f8 <GPIO_Init+0x1d0>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a49      	ldr	r2, [pc, #292]	; (80008cc <GPIO_Init+0x2a4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d024      	beq.n	80007f4 <GPIO_Init+0x1cc>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a48      	ldr	r2, [pc, #288]	; (80008d0 <GPIO_Init+0x2a8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d01d      	beq.n	80007f0 <GPIO_Init+0x1c8>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a46      	ldr	r2, [pc, #280]	; (80008d4 <GPIO_Init+0x2ac>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d016      	beq.n	80007ec <GPIO_Init+0x1c4>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a45      	ldr	r2, [pc, #276]	; (80008d8 <GPIO_Init+0x2b0>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d00f      	beq.n	80007e8 <GPIO_Init+0x1c0>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a43      	ldr	r2, [pc, #268]	; (80008dc <GPIO_Init+0x2b4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d008      	beq.n	80007e4 <GPIO_Init+0x1bc>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <GPIO_Init+0x2b8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d101      	bne.n	80007e0 <GPIO_Init+0x1b8>
 80007dc:	2306      	movs	r3, #6
 80007de:	e00c      	b.n	80007fa <GPIO_Init+0x1d2>
 80007e0:	2300      	movs	r3, #0
 80007e2:	e00a      	b.n	80007fa <GPIO_Init+0x1d2>
 80007e4:	2305      	movs	r3, #5
 80007e6:	e008      	b.n	80007fa <GPIO_Init+0x1d2>
 80007e8:	2304      	movs	r3, #4
 80007ea:	e006      	b.n	80007fa <GPIO_Init+0x1d2>
 80007ec:	2303      	movs	r3, #3
 80007ee:	e004      	b.n	80007fa <GPIO_Init+0x1d2>
 80007f0:	2302      	movs	r3, #2
 80007f2:	e002      	b.n	80007fa <GPIO_Init+0x1d2>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <GPIO_Init+0x1d2>
 80007f8:	2300      	movs	r3, #0
 80007fa:	737b      	strb	r3, [r7, #13]
		AFIO->EXTICR[temp1] = code << (temp2*4);
 80007fc:	7b7a      	ldrb	r2, [r7, #13]
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	fa02 f103 	lsl.w	r1, r2, r3
 8000806:	4a37      	ldr	r2, [pc, #220]	; (80008e4 <GPIO_Init+0x2bc>)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	3302      	adds	r3, #2
 800080c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <GPIO_Init+0x29c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	6892      	ldr	r2, [r2, #8]
 8000818:	2101      	movs	r1, #1
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <GPIO_Init+0x29c>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6013      	str	r3, [r2, #0]
					finalConfig = 0x10 ==> modeConfig = 0x10 | 0x00 = 0x10
					temp = 0x100000000000;
					GPIOx_CRL: 0000 0000 0000 0000 0000 1000 0000 0000
	*/

	if(pGPIOHandle->GPIO_PinConfig.PinNumber < PIN8)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2b07      	cmp	r3, #7
 800082c:	d820      	bhi.n	8000870 <GPIO_Init+0x248>
	{
		pinPosition = pGPIOHandle->GPIO_PinConfig.PinNumber;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	76fb      	strb	r3, [r7, #27]
		temp = pGPIOHandle->pGPIOx->CRL & ~(MODE_CONFIG_CLEAR << (pinPosition * MODE_CONFIG_SIZE));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	7efa      	ldrb	r2, [r7, #27]
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	210f      	movs	r1, #15
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	43d2      	mvns	r2, r2
 8000846:	4013      	ands	r3, r2
 8000848:	617b      	str	r3, [r7, #20]
		modeConfig = pGPIOHandle->GPIO_PinConfig.PinMode | finalConfig;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7b1b      	ldrb	r3, [r3, #12]
 800084e:	461a      	mov	r2, r3
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	61fb      	str	r3, [r7, #28]
		temp |= modeConfig << (pinPosition * MODE_CONFIG_SIZE);
 8000856:	7efb      	ldrb	r3, [r7, #27]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	4313      	orrs	r3, r2
 8000864:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->CRL = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	601a      	str	r2, [r3, #0]
				GPIO_PinConfig.PinMode = MODE_INPUT: 0x00
				finalConfig = 0x10 ==> modeConfig = 0x10 | 0x00 = 0x10
				temp = 0x100000000000;
				GPIOx_CRH: 0000 0000 0000 0000 0000 1000 0000 0000
	*/
}
 800086e:	e025      	b.n	80008bc <GPIO_Init+0x294>
		pinPosition = pGPIOHandle->GPIO_PinConfig.PinNumber - PIN8;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3b08      	subs	r3, #8
 8000878:	76fb      	strb	r3, [r7, #27]
		temp = pGPIOHandle->pGPIOx->CRH & ~(MODE_CONFIG_CLEAR << (pinPosition * MODE_CONFIG_SIZE));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	7efa      	ldrb	r2, [r7, #27]
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	210f      	movs	r1, #15
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	43d2      	mvns	r2, r2
 800088c:	4013      	ands	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->CRH = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	605a      	str	r2, [r3, #4]
		modeConfig = pGPIOHandle->GPIO_PinConfig.PinMode | finalConfig;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7b1b      	ldrb	r3, [r3, #12]
 800089c:	461a      	mov	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61fb      	str	r3, [r7, #28]
		temp |= modeConfig << (pinPosition * MODE_CONFIG_SIZE);
 80008a4:	7efb      	ldrb	r3, [r7, #27]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	69fa      	ldr	r2, [r7, #28]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->CRH = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	605a      	str	r2, [r3, #4]
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010400 	.word	0x40010400
 80008c8:	40010800 	.word	0x40010800
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	40011000 	.word	0x40011000
 80008d4:	40011400 	.word	0x40011400
 80008d8:	40011800 	.word	0x40011800
 80008dc:	40011c00 	.word	0x40011c00
 80008e0:	40012000 	.word	0x40012000
 80008e4:	40010000 	.word	0x40010000

080008e8 <RCC_GetPCLK1Value>:
uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, preAHB, preAPB1;

	clksrc = ((RCC->CFGR >> 2) & 0x03);
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <RCC_GetPCLK1Value+0x8c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 || clksrc == 1)
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <RCC_GetPCLK1Value+0x20>
 8000902:	7a7b      	ldrb	r3, [r7, #9]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <RCC_GetPCLK1Value+0x24>
	{
		SystemClk = 8000000;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <RCC_GetPCLK1Value+0x90>)
 800090a:	60fb      	str	r3, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4) & 0xF);
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <RCC_GetPCLK1Value+0x8c>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	2b07      	cmp	r3, #7
 800091e:	d802      	bhi.n	8000926 <RCC_GetPCLK1Value+0x3e>
	{
		preAHB = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	72fb      	strb	r3, [r7, #11]
 8000924:	e005      	b.n	8000932 <RCC_GetPCLK1Value+0x4a>
	}else
	{
		preAHB = AHB_Prescaler[temp - 8];
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	3b08      	subs	r3, #8
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <RCC_GetPCLK1Value+0x94>)
 800092c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000930:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10) & 0x7);
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <RCC_GetPCLK1Value+0x8c>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	0a9b      	lsrs	r3, r3, #10
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000940:	7a3b      	ldrb	r3, [r7, #8]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d802      	bhi.n	800094c <RCC_GetPCLK1Value+0x64>
	{
		preAPB1 = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	72bb      	strb	r3, [r7, #10]
 800094a:	e004      	b.n	8000956 <RCC_GetPCLK1Value+0x6e>
	}else
	{
		preAPB1 = APB1_Prescaler[temp - 4];
 800094c:	7a3b      	ldrb	r3, [r7, #8]
 800094e:	3b04      	subs	r3, #4
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <RCC_GetPCLK1Value+0x98>)
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/preAHB)/preAPB1;
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	fbb2 f2f3 	udiv	r2, r2, r3
 800095e:	7abb      	ldrb	r3, [r7, #10]
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
 8000964:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000966:	687b      	ldr	r3, [r7, #4]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	007a1200 	.word	0x007a1200
 800097c:	20000400 	.word	0x20000400
 8000980:	20000410 	.word	0x20000410

08000984 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;
	uint8_t clksrc, temp, preAHB, preAPB2;

	clksrc = ((RCC->CFGR >> 2) & 0x03);
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <RCC_GetPCLK2Value+0x8c>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 || clksrc == 1)
 8000998:	7a7b      	ldrb	r3, [r7, #9]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <RCC_GetPCLK2Value+0x20>
 800099e:	7a7b      	ldrb	r3, [r7, #9]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClk = 8000000;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <RCC_GetPCLK2Value+0x90>)
 80009a6:	60fb      	str	r3, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4) & 0xF);
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <RCC_GetPCLK2Value+0x8c>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	091b      	lsrs	r3, r3, #4
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 030f 	and.w	r3, r3, #15
 80009b4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80009b6:	7a3b      	ldrb	r3, [r7, #8]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d802      	bhi.n	80009c2 <RCC_GetPCLK2Value+0x3e>
	{
		preAHB = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	72fb      	strb	r3, [r7, #11]
 80009c0:	e005      	b.n	80009ce <RCC_GetPCLK2Value+0x4a>
	}else
	{
		preAHB = AHB_Prescaler[temp - 8];
 80009c2:	7a3b      	ldrb	r3, [r7, #8]
 80009c4:	3b08      	subs	r3, #8
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <RCC_GetPCLK2Value+0x94>)
 80009c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009cc:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 13) & 0x7);
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <RCC_GetPCLK2Value+0x8c>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	0b5b      	lsrs	r3, r3, #13
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d802      	bhi.n	80009e8 <RCC_GetPCLK2Value+0x64>
	{
		preAPB2 = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	72bb      	strb	r3, [r7, #10]
 80009e6:	e004      	b.n	80009f2 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		preAPB2 = APB2_Prescaler[temp - 4];
 80009e8:	7a3b      	ldrb	r3, [r7, #8]
 80009ea:	3b04      	subs	r3, #4
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <RCC_GetPCLK2Value+0x98>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk/preAHB)/preAPB2;
 80009f2:	7afb      	ldrb	r3, [r7, #11]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80009fa:	7abb      	ldrb	r3, [r7, #10]
 80009fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a00:	607b      	str	r3, [r7, #4]
	return pclk2;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	007a1200 	.word	0x007a1200
 8000a18:	20000400 	.word	0x20000400
 8000a1c:	20000414 	.word	0x20000414

08000a20 <USART_PeriClockControl>:
#include "my_uart_stm32f103.h"
#include "my_rcc_stm32f103.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d135      	bne.n	8000a9e <USART_PeriClockControl+0x7e>
	{
		if(pUSARTx == USART1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <USART_PeriClockControl+0x88>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
		} else if(pUSARTx == UART5)
		{
			UART5_PCLK_EN();
		}
	}
}
 8000a46:	e02a      	b.n	8000a9e <USART_PeriClockControl+0x7e>
		else if(pUSARTx == USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <USART_PeriClockControl+0x90>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5a:	61d3      	str	r3, [r2, #28]
}
 8000a5c:	e01f      	b.n	8000a9e <USART_PeriClockControl+0x7e>
		} else if(pUSARTx == USART3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <USART_PeriClockControl+0x94>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a70:	61d3      	str	r3, [r2, #28]
}
 8000a72:	e014      	b.n	8000a9e <USART_PeriClockControl+0x7e>
		} else if(pUSARTx == UART4)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <USART_PeriClockControl+0x98>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a86:	61d3      	str	r3, [r2, #28]
}
 8000a88:	e009      	b.n	8000a9e <USART_PeriClockControl+0x7e>
		} else if(pUSARTx == UART5)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <USART_PeriClockControl+0x9c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d105      	bne.n	8000a9e <USART_PeriClockControl+0x7e>
			UART5_PCLK_EN();
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <USART_PeriClockControl+0x8c>)
 8000a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a9c:	61d3      	str	r3, [r2, #28]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	40004c00 	.word	0x40004c00
 8000abc:	40005000 	.word	0x40005000

08000ac0 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffa6 	bl	8000a20 <USART_PeriClockControl>

	uint8_t temp = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

	//Mode

	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d104      	bne.n	8000aea <USART_Init+0x2a>
	{
		temp |= (1 << USART_CR1_TE);
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e014      	b.n	8000b14 <USART_Init+0x54>
	}else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d104      	bne.n	8000afc <USART_Init+0x3c>
	{
		temp |= (1 << USART_CR1_RE);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e00b      	b.n	8000b14 <USART_Init+0x54>
	}else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d107      	bne.n	8000b14 <USART_Init+0x54>
	{
		temp |= (1 << USART_CR1_TE);
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	73fb      	strb	r3, [r7, #15]
		temp |= (1 << USART_CR1_RE);
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	73fb      	strb	r3, [r7, #15]
	}

	//Word length
	if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_8BITS)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7a5b      	ldrb	r3, [r3, #9]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <USART_Init+0x62>
	{
		temp &=~ (1 << USART_CR1_M);
	}else if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7a5b      	ldrb	r3, [r3, #9]
 8000b20:	2b01      	cmp	r3, #1
	{
		temp |= (1 << USART_CR1_M);
	}

	//parity
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7a9b      	ldrb	r3, [r3, #10]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <USART_Init+0x70>
	{
		temp |= (1 << USART_CR1_PCE);
		temp &=~ (1 << USART_CR1_PS);
	} else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7a9b      	ldrb	r3, [r3, #10]
 8000b2e:	2b02      	cmp	r3, #2
	{
		temp |= (1 << USART_CR1_PCE);
		temp |= (1 << USART_CR1_PS);
	}

	pUSARTHandle->pUSARTx->CR1 = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	//Stopbits
	temp |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a1b      	ldrb	r3, [r3, #8]
 8000b40:	031b      	lsls	r3, r3, #12
 8000b42:	b25a      	sxtb	r2, r3
 8000b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	73fb      	strb	r3, [r7, #15]
	pUSARTHandle->pUSARTx->CR2 = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	611a      	str	r2, [r3, #16]

	temp = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7adb      	ldrb	r3, [r3, #11]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d006      	beq.n	8000b70 <USART_Init+0xb0>
	{
		temp |= (1 << USART_CR3_CTSE);
	}else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7adb      	ldrb	r3, [r3, #11]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d002      	beq.n	8000b70 <USART_Init+0xb0>
	{
		temp |= (1 << USART_CR3_RTSE);
	}else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7adb      	ldrb	r3, [r3, #11]
 8000b6e:	2b03      	cmp	r3, #3
	{
		temp |= (1 << USART_CR3_CTSE);
		temp |= (1 << USART_CR3_RTSE);
	}

	pUSARTHandle->pUSARTx->CR3 = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	615a      	str	r2, [r3, #20]

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f000 f804 	bl	8000b90 <USART_SetBaudRate>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	float usartdiv;
	uint32_t M_part, F_part;

	uint32_t temp = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]

	if(pUSARTx == USART1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <USART_SetBaudRate+0x88>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d103      	bne.n	8000bae <USART_SetBaudRate+0x1e>
	{
		PCLKx = RCC_GetPCLK2Value();
 8000ba6:	f7ff feed 	bl	8000984 <RCC_GetPCLK2Value>
 8000baa:	61f8      	str	r0, [r7, #28]
 8000bac:	e002      	b.n	8000bb4 <USART_SetBaudRate+0x24>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000bae:	f7ff fe9b 	bl	80008e8 <RCC_GetPCLK1Value>
 8000bb2:	61f8      	str	r0, [r7, #28]
	}

	//sample

	usartdiv = (PCLKx/(16*BaudRate));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	69fa      	ldr	r2, [r7, #28]
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb94 	bl	80002ec <__aeabi_ui2f>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	617b      	str	r3, [r7, #20]

	M_part = (uint32_t)usartdiv;
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff fbe7 	bl	800039c <__aeabi_f2uiz>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	613b      	str	r3, [r7, #16]

	temp |= M_part << 4;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]

	F_part = usartdiv - M_part;
 8000bdc:	6938      	ldr	r0, [r7, #16]
 8000bde:	f7ff fb85 	bl	80002ec <__aeabi_ui2f>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4619      	mov	r1, r3
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff face 	bl	8000188 <__aeabi_fsub>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fbd4 	bl	800039c <__aeabi_f2uiz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60fb      	str	r3, [r7, #12]
	F_part = (uint32_t)(F_part * 16);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	60fb      	str	r3, [r7, #12]
	temp |= (F_part & 0xF);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]

	pUSARTx->BRR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	609a      	str	r2, [r3, #8]
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013800 	.word	0x40013800

08000c1c <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &=~ (1 << USART_CR1_UE);
	}
}
 8000c3a:	e005      	b.n	8000c48 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~ (1 << USART_CR1_UE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60da      	str	r2, [r3, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
	uint8_t state = RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
	if(pUSARTx->SR & StatusFlagName)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <USART_GetFlagStatus+0x20>
	{
		state = SET;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
	}

	return state;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
	uint16_t Data;

	for(uint32_t i = 0; i < Len; i++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e030      	b.n	8000cf2 <USART_SendData+0x74>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000c90:	bf00      	nop
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffda 	bl	8000c52 <USART_GetFlagStatus>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f6      	beq.n	8000c92 <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	7a5b      	ldrb	r3, [r3, #9]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d117      	bne.n	8000cdc <USART_SendData+0x5e>
		{
			Data = *(uint16_t *)pTxBuffer;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	827b      	strh	r3, [r7, #18]
			pUSARTHandle->pUSARTx->DR = (Data & 0x01FF);
 8000cb2:	8a7a      	ldrh	r2, [r7, #18]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cbc:	605a      	str	r2, [r3, #4]

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	7a9b      	ldrb	r3, [r3, #10]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d106      	bne.n	8000cd4 <USART_SendData+0x56>
			{
				pTxBuffer++;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	e00b      	b.n	8000cec <USART_SendData+0x6e>
			}
			else
			{
				pTxBuffer++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	e007      	b.n	8000cec <USART_SendData+0x6e>
			}
		}
		else
		{
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & 0xFF);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	605a      	str	r2, [r3, #4]

			pTxBuffer++;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3ca      	bcc.n	8000c90 <USART_SendData+0x12>
		}
	}

	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000cfa:	bf00      	nop
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffa5 	bl	8000c52 <USART_GetFlagStatus>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f6      	beq.n	8000cfc <USART_SendData+0x7e>
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <__libc_init_array>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4d0c      	ldr	r5, [pc, #48]	; (8000d50 <__libc_init_array+0x38>)
 8000d1e:	4c0d      	ldr	r4, [pc, #52]	; (8000d54 <__libc_init_array+0x3c>)
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	42a6      	cmp	r6, r4
 8000d26:	d109      	bne.n	8000d3c <__libc_init_array+0x24>
 8000d28:	f000 f81a 	bl	8000d60 <_init>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	4d0a      	ldr	r5, [pc, #40]	; (8000d58 <__libc_init_array+0x40>)
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <__libc_init_array+0x44>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	42a6      	cmp	r6, r4
 8000d38:	d105      	bne.n	8000d46 <__libc_init_array+0x2e>
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d40:	4798      	blx	r3
 8000d42:	3601      	adds	r6, #1
 8000d44:	e7ee      	b.n	8000d24 <__libc_init_array+0xc>
 8000d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4a:	4798      	blx	r3
 8000d4c:	3601      	adds	r6, #1
 8000d4e:	e7f2      	b.n	8000d36 <__libc_init_array+0x1e>
 8000d50:	08000d78 	.word	0x08000d78
 8000d54:	08000d78 	.word	0x08000d78
 8000d58:	08000d78 	.word	0x08000d78
 8000d5c:	08000d7c 	.word	0x08000d7c

08000d60 <_init>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr

08000d6c <_fini>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr
